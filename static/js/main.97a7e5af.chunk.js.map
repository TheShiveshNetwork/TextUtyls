{"version":3,"sources":["components/Form.js","components/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["Form","props","useState","text","setText","className","htmlFor","heading","value","onChange","event","target","id","rows","type","onClick","newtext","substr","navigator","clipboard","writeText","toUpperCase","charAt","slice","split","filter","s","join","Navbar","href","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMAEe,SAASA,EAAKC,GACzB,IAsBA,EAAwBC,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KACA,OACI,8BACI,+BACA,sBAAKC,UAAU,2BAAf,UACI,2CACA,uBAAOC,QAAQ,8BAAf,SAA8CL,EAAMM,UACpD,0BAAUF,UAAU,4BAA4BG,MAAOL,EAAMM,SAVlD,SAACC,GACpBN,EAAQM,EAAMC,OAAOH,QAS0EI,GAAG,8BAA8BC,KAAK,OAC7H,wBAAQC,KAAK,SAASC,QA9BpB,WACV,IAAIC,EAAUb,EAAKc,OAAO,GAAI,GAC9Bb,EAAQY,IA4BsCX,UAAU,sBAAhD,wBACA,wBAAQS,KAAK,SAASC,QA3BrB,WACTG,UAAUC,UAAUC,UAAUjB,IA0BeE,UAAU,sBAA/C,uBACA,wBAAQS,KAAK,SAASC,QAzBpB,WACV,IAAIC,EAAUb,EAAKkB,cACnBjB,EAAQY,IAuBsCX,UAAU,sBAAhD,wBACA,wBAAQS,KAAK,SAASC,QAtBf,WACf,IAAIC,EAAUb,EAAKmB,OAAO,GAAGD,cAAgBlB,EAAKoB,MAAM,GACxDnB,EAAQY,IAoB2CX,UAAU,sBAArD,6BACA,wBAAQS,KAAK,SAASC,QAnBb,SAACL,GAClB,IAAIM,EAAUb,EAAKqB,MAAM,KAAKC,QAAO,SAAAC,GAAC,OAAIA,KAAGC,KAAK,KAClDvB,EAAQY,IAiB6CX,UAAU,sBAAvD,wCCnCD,SAASuB,IACpB,OACI,8BACI,sBAAKvB,UAAU,2DAAf,UACA,mBAAGA,UAAU,eAAewB,KAAK,IAAjC,uBACA,wBAAQxB,UAAU,iBAAiBS,KAAK,SAAS,cAAY,WAAW,cAAY,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAAtL,SACI,sBAAMT,UAAU,0BAEpB,qBAAKA,UAAU,2BAA2BO,GAAG,yBAA7C,SACI,qBAAIP,UAAU,qBAAd,UACA,oBAAIA,UAAU,kBAAd,SACI,mBAAGA,UAAU,WAAWwB,KAAK,IAA7B,oBAEJ,oBAAIxB,UAAU,WAAd,SACI,mBAAGA,UAAU,WAAWwB,KAAK,IAA7B,+BCHLC,MATf,WACE,OACE,qCACE,cAACF,EAAD,IACA,cAAC5B,EAAD,CAAMO,QAAQ,8BCILwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.97a7e5af.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\nexport default function Form(props) {\r\n    const clear = ()=> {\r\n        let newtext = text.substr(0, -1);\r\n        setText(newtext);\r\n    }\r\n    const copy = ()=> {\r\n        navigator.clipboard.writeText(text)\r\n    }\r\n    const upper = ()=> {\r\n        let newtext = text.toUpperCase();\r\n        setText(newtext);\r\n    }\r\n    const capitalize = ()=> {\r\n        let newtext = text.charAt(0).toUpperCase() + text.slice(1);\r\n        setText(newtext);\r\n    }\r\n    const remove_space = (event)=> {\r\n        let newtext = text.split(' ').filter(s => s).join(' ');\r\n        setText(newtext);\r\n    }\r\n    const handleOnChange = (event)=> {\r\n        setText(event.target.value);\r\n    }\r\n    const [text, setText] = useState();\r\n    return (\r\n        <div>\r\n            <form>\r\n            <div className=\"form-group container p-4\">\r\n                <h1>TextUtyls</h1>\r\n                <label htmlFor=\"exampleFormControlTextarea1\">{props.heading}</label>\r\n                <textarea className=\"thetext form-control mb-4\" value={text} onChange={handleOnChange} id=\"exampleFormControlTextarea1\" rows=\"12\"></textarea>\r\n                <button type=\"button\" onClick={clear} className=\"btn m-2 btn-primary\">Clear Text</button>\r\n                <button type=\"button\" onClick={copy} className=\"btn m-2 btn-primary\">Copy Text</button>\r\n                <button type=\"button\" onClick={upper} className=\"btn m-2 btn-primary\">Upper Text</button>\r\n                <button type=\"button\" onClick={capitalize} className=\"btn m-2 btn-primary\">Capitalize Text</button>\r\n                <button type=\"button\" onClick={remove_space} className=\"btn m-2 btn-primary\">Remove Extra Spaces</button>\r\n            </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Navbar() {\r\n    return (\r\n        <div>\r\n            <nav className=\"navbar px-3 navbar-expand-lg navbar-dark pd-3 bg-primary\">\r\n            <a className=\"navbar-brand\" href=\"/\">TextUtyls</a>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                <li className=\"nav-item active\">\r\n                    <a className=\"nav-link\" href=\"#\">Home</a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <a className=\"nav-link\" href=\"#\">About</a>\r\n                </li>\r\n                </ul>\r\n            </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport Form from './components/Form';\nimport Navbar from './components/Navbar';\n\nfunction App() {\n  return (\n    <>\n      <Navbar/>\n      <Form heading=\"Enter your text below\"/>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}